# Workflow responsible for core acceptance testing.
# Tests Currently Run:
#     - flake8-linter
#     - image-build-test
#    
# This workflow only validates images can build
# but does not push images to any repository.
#
# The build-push-dev-image and build-push-release workflows 
# handle the develop and release image storage respectively.
# CI/CD Maintainer: Joshua Seals ðŸ¦­
#
#
# TODO: 
#       1. Ensure this buildcache in step Build Container
#           does not conflict with buildcache needed for dev builds.
#

name: Code-Checks
on:
  push:
    branches-ignore:
      - master
      - main
      - develop
    paths-ignore:
      - README.md
      - .old_cicd/*
      - .github/*
      # - .github/workflows/*
      - LICENSE
      - .gitignore
      - .dockerignore
      - .githooks
  pull_request:
    branches:
      - develop
      - master
      - main 
    types: [ opened, synchronize ]


jobs:
############################## flake8-linter ##############################
  flake8-linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
          
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Currently actions/setup-python supports caching
    # but the cache is not as robust as cache action.
    # Here we cache the entire python env which speeds subsequent builds up alot. (alot being scientific term)
    # Ref: https://blog.allenai.org/python-caching-in-github-actions-e9452698e98d
    - uses: actions/cache@v3
      name: Cache Python
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

    - name: Install Requirements
      run: |
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 --ignore=E,W . 
      # We continue on error here until the code is clean
      # flake8 --ignore=E,W --exit-zero . 
      continue-on-error: true

############################## test-image-build ##############################
  test-image-build:
    needs: flake8-linter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set short git commit SHA
      id: vars
      run: |
        echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
    # https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/

    - name: Confirm git commit SHA output
      run: echo ${{ steps.vars.outputs.short_sha }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      # with:
      #   buildkitd-flags: --debug

    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        # # registry: ${{ secrets.CONTAINERHUB_URL }}
        # username: ${{ secrets.CONTAINERHUB_USERNAME }}
        # password: ${{ secrets.CONTAINERHUB_TOKEN }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    # - name: Sanitize repo slug
    #   uses: actions/github-script@v6
    #   id: repo_slug
    #   with:
    #     result-encoding: string
    #     script: return '${{ secrets.CONTAINERHUB_URL }}/${{ github.repository }}'.toLowerCase()

    # - run: |
    #     sudo tcpdump -xx -t -i any dst containers.renci.org -w containers.tcpdump &
    #     sleep 1

    # Notes on Cache: 
    # https://docs.docker.com/build/ci/github-actions/examples/#inline-cache
    - name: Build Container
      uses: docker/build-push-action@v4
      with:
        # context: .
        push: false
        cache-from: type=registry,ref=${{ github.repository }}:buildcache
        cache-to: type=registry,ref=${{ github.repository }}:buildcache,mode=max

    # - name: Stop tcpdump
    #   if: always()
    #   run: |
    #     sleep 1
    #     sudo kill -2 $(pgrep tcpdump)

    # - uses: actions/upload-artifact@v3
    #   with:
    #     name: tcpdump
    #     path: containers.tcpdump