###############################################################################
## Appstore UI
##
##  This script presents shell utilities for interacting with the appstore.
##   
##  Usage: see the help command below.
##
###############################################################################
#!/bin/bash
set -ex

# Secrets
export SECRET_KEY=${SECRET_KEY:-djangosecretkey}

# Configure the environment
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
APPSTORE_HOME=$( dirname $DIR )
dockerhub_repo=helxplatform
image_ver=0.0.1

###############################################################################
##
## Create a superuser programmatically, facilitating use of secrets.
##
###############################################################################
createsuperuser () {
    # In production, set environment variables.
    # In kubernetes, set the environment variables via secrets.
    create_superuser() {
    local SUPERUSERNAME=${APPSTORE_DJANGO_USERNAME:-admin}
    local SUPERUSEREMAIL=""
    local SUPERUSERPASSWORD=${APPSTORE_DJANGO_PASSWORD:-admin}
    cat <<EOF | python manage.py shell --settings=appstore.settings.braini_settings
from django.contrib.auth import get_user_model

User = get_user_model()

if not User.objects.filter(username="$SUPERUSERNAME").exists():
    User.objects.create_superuser("$SUPERUSERNAME", "$SUPERUSEREMAIL", "$SUPERUSERPASSWORD")
else:
    print('User "{}" already exists, not created'.format("$SUPERUSERNAME"))
EOF
  }
  create_superuser
}

#########################################################################################################
##
## Adding and Removing User to the Authorized Users table programmatically, facilitating use of secrets.
##
#########################################################################################################
manageauthorizedusers () {

    project=$1;
    test -z ${project} && help;
    local AUTH_USERS=$AUTHORIZED_USERS;
    local REMOVE_AUTH_USERS=$REMOVE_AUTHORIZED_USERS;

    add () {
        if [ ! -z "$AUTH_USERS" -a "$AUTH_USERS" != " " ]; then
            USERS=(${AUTH_USERS//,/ })
            for user in "${USERS[@]}"; do
                cat <<EOF | python manage.py shell --settings=appstore.settings.${project}_settings
from core.models import AuthorizedUser
if AuthorizedUser.objects.filter(email="$user"):
    print(f"User already in Authorized Users list ----> add skipping")
else:
    u = AuthorizedUser(email="$user")
    u.save()
    print(f"Added {'$user'} to the Authorized Users list ----> add success")
EOF
            done
        fi
    }

    remove () {
        if [ ! -z "$REMOVE_AUTH_USERS" -a "$REMOVE_AUTH_USERS" != " " ]; then
            USERS=(${REMOVE_AUTH_USERS//,/ })
            for user in "${USERS[@]}"; do
                cat <<EOF | python manage.py shell --settings=appstore.settings.${project}_settings
from core.models import AuthorizedUser
a_user = AuthorizedUser.objects.filter(email="$user")
if a_user:
    a_user.delete()
    print(f"Removed {'$user'} from Authorized Users list ----> remove success")
else:
    print(f"{'$user'} not in Authorized Users list ----> remove skipping")
EOF
            done
        fi
    }
    add;
    remove;
}

###############################################################################
##
## Upgrade the database running migrations and collecting static objects.
##
###############################################################################
updatedb () {
    brand=$1
    test -z ${brand} && help
    settings=appstore.settings.${brand}_settings && \
    DEV_PHASE=stub python manage.py makemigrations --settings=$settings && \
	DEV_PHASE=stub python manage.py migrate       --settings=$settings && \
	DEV_PHASE=stub python manage.py addingwhitelistedsocialapp --settings=$settings  &&\
	DEV_PHASE=stub python manage.py collectstatic --settings=$settings --clear --no-input
}

###############################################################################
##
## Run the appstore with customized branding, migrations, and packaging.
##
###############################################################################
run () {
    brand=$1
    test -z ${brand} && help
    settings=appstore.settings.${brand}_settings && \
    export DJANGO_SETTINGS_MODULE=$settings
    gunicorn --bind 0.0.0.0:8000 --log-level=debug appstore.wsgi:application --workers=5
}

###############################################################################
##
## Run the appstore's unit tests with product specific customizations.
##
###############################################################################
tests () {
    brand=$1
    test -z ${brand} && help
    settings=appstore.settings.${brand}_settings && \
	DEV_PHASE=stub python manage.py test --settings=$settings
}

###############################################################################
##
## Build docker image.
##
###############################################################################
image () {
    build () {
	docker build . \
	       -t $dockerhub_repo/appstore:latest \
	       -t $dockerhub_repo/appstore:$image_ver $*
    }
    push () {
	docker push . \
	       -t $dockerhub_repo/appstore:latest \
	       -t $dockerhub_repo/appstore:$image_ver $*
    }
    frontend () {
        # Pull and start the ui container to fetch frontend assets
        docker run -d --name frontend helxplatform/helx-ui:latest;
        # Copy the assets to the local django frontend app for local dev and serving
        docker cp frontend:/usr/share/nginx/html ./frontend/static/frontend;
        # Stop and remove container to prevent future run collisions
        docker container rm "$(docker container stop "$(docker container ls -q --filter name="frontend")")" $*
        mv ./frontend/static/frontend/index.html ./frontend/templates/frontend
    }

    run () {
	brand=$1
    kube_path=$2
	test -z ${brand} && help
	test -z ${kube_path} && echo "\nPlease provide path to .kube\n" && help
	shift
	shift
	DEBUG_LEVEL=DEBUG
	settings=appstore.settings.${brand}_settings && \
	    docker run --rm --name appstore -p 8000:8000 \
           -v ${kube_path}/.kube/config:/home/appstore/.kube/config \
           -v ${kube_path}/.minikube/:${kube_path}/.minikube/ \
		   -e DJANGO_SETTINGS=$brand \
		   -e DEBUG=${DEBUG} \
           -e DEV_PHASE=${DEV_PHASE} \
		   -e OAUTH_PROVIDERS=${OAUTH_PROVIDERS} \
           -e GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID} \
           -e GOOGLE_SECRET=${GOOGLE_SECRET} \
           -e GOOGLE_NAME=${GOOGLE_NAME} \
           -e GOOGLE_KEY=${GOOGLE_KEY} \
           -e GOOGLE_SITES=${GOOGLE_SITES} \
           -e GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID} \
           -e GITHUB_SECRET=${GITHUB_SECRET} \
           -e GITHUB_NAME=${GITHUB_NAME} \
           -e GITHUB_KEY=${GITHUB_KEY} \
           -e GITHUB_SITES=${GITHUB_SITES}\
           -e BRAINI_RODS=${BRAINI_RODS}\
           -e NRC_MICROSCOPY_IRODS=${NRC_MICROSCOPY_IRODS}\
           -e RODS_USERNAME=${RODS_USERNAME}\
           -e RODS_PASSWORD=${RODS_PASSWORD}\
           -e EMAIL_HOST_USER=${EMAIL_HOST_USER}\
           -e EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD} \
		   $dockerhub_repo/appstore:$image_ver $*
    }
    $*
}

###############################################################################
##
## Test everything we can. Then build and push.
##
###############################################################################
cicd () {
    for product in braini scidas catalyst restartr heal; do
	createsuperuser
	tests $product
    done
    rm appstore/DATABSE.sqlite3
}

###############################################################################
##
## Show help.
##
###############################################################################
help () {
    printf """bin/appstore management interface.

Usage:
   manageauthorizedusers [ braini | scidas | catalyst | restartr | heal ]                      \t Add and Remove authorized users based on environment variables.
   createsuperuser                                                                             \t Create a superuser based on environment variables.
   run         [ braini | scidas | catalyst | restartr | heal ]                                \t Run the application.
   tests       [ braini | scidas | catalyst | restartr | heal ]                                \t Run all unit tests.
   image build                                                                                 \t Build the docker image.
   image push  [ braini | scidas | catalyst | restartr | heal ]                                \t Push the image to the repository.
   image run   [ braini | scidas | catalyst | restartr | heal ] [local .kube path ex: \$HOME ] \t Run the docker image.
   image frontend                                                                              \t setup frontend resources for local development.
"""
    exit 1
}

start(){
     product=$1
     updatedb $product
     createsuperuser
     manageauthorizedusers $product
     run $product
}
$*
